<div id="__w2_iIVdMfs_container">Imagine you've got a black box with a big red button on top. When you press the button, the black box lights up.<br><br>In this example, <i>pressing the red button</i> means <i>the black box will light up</i>.&nbsp; There is an understanding between you and the box that says "if I press the button, the box will light up."<br><br>Think of an <i>interface</i> as the understanding between you and the box.&nbsp; Now let's extend the metaphor:<br><br>Instead of your finger, you've got a computer with - you guessed it - a mechanical finger.&nbsp; You can tell the computer to press the button, and the box will light up.&nbsp; See how this is still functionally the same? You told a computer to do your bidding, instead of your finger.<br><br>Let's extend even further: instead of hitting a mechanical button, let's pretend that you have to say "Light Up!" to the box in order to light it up.&nbsp; If you could program your computer to say this, the black box will light up.&nbsp; Still functionally the same thing.<br><br>Now imagine instead of <i>saying</i> this verbally, you write it out as a written command for the box.&nbsp; And - this part is the most critical - the black box tells you the exact wording to use: <b>lightMeUp</b>().&nbsp; The box also has an instruction manual on how to submit this command to the box.<br><br>API stands for Application Programming Interface.&nbsp; In this example, the application is the box itself.&nbsp; The interface is the understanding between you and the box. In other words,&nbsp; it is an interface for programming the application (the box).&nbsp; The API, therefore, lets you know how to write out the commands to make the box do stuff.<div id="__w2_iIVdMfs_container_boundary" style="margin:0px; padding:0px; height:0px; width:0px;" class="container_boundary">&nbsp;&nbsp;</div></div>
